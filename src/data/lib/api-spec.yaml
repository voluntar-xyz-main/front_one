openapi: 3.0.3
info:
  title: Voluntar XYZ API
  description: REST API specification for Voluntar XYZ platform
  version: 1.0.0
servers:
  - url: /api/v1
    description: Default API server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        user_metadata:
          type: object
          properties:
            full_name:
              type: string
    
    Profile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        full_name:
          type: string
        skills:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              id:
                type: string

    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        logoUrl:
          type: string
        primaryColor:
          type: string
        secondaryColor:
          type: string
        locationName:
          type: string
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
    
    Job:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        organizationId:
          type: string
          format: uuid
        locationName:
          type: string
        postedAt:
          type: string
          format: date-time
        deadline:
          type: string
          format: date-time
        categoryId:
          type: string
          format: uuid
        skills:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              id:
                type: string
        categories:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        organizations:
          $ref: '#/components/schemas/Organization'
    
    Collection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        primaryColor:
          type: string
        secondaryColor:
          type: string
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
    
    CollectionWithItems:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            jobs:
              type: array
              items:
                $ref: '#/components/schemas/Job'
            organizations:
              type: array
              items:
                $ref: '#/components/schemas/Organization'
            collections:
              type: array
              items:
                $ref: '#/components/schemas/Collection'

    PageLayout:
      type: object
      properties:
        id:
          type: string
          format: uuid
        slug:
          type: string
        title:
          type: string
        structure:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              data:
                type: object

    Error:
      type: object
      properties:
        error:
          type: string
        status:
          type: integer
        message:
          type: string

paths:
  /auth/signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                options:
                  type: object
                  properties:
                    data:
                      type: object
                      properties:
                        full_name:
                          type: string
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/signin:
    post:
      summary: Sign in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: User signed in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/signout:
    post:
      summary: Sign out a user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User signed out successfully
        '401':
          description: Unauthorized

  /auth/user:
    get:
      summary: Get the current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /profiles/{userId}:
    get:
      summary: Get a user profile
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update a user profile
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: Updated user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          description: Unauthorized
  
  /profiles:
    post:
      summary: Create a new user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '201':
          description: Created user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          description: Unauthorized

  /organizations:
    get:
      summary: Get all organizations
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
    
    post:
      summary: Create a new organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '201':
          description: Created organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          description: Unauthorized

  /organizations/{id}:
    get:
      summary: Get organization by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /organizations/user/{userId}:
    get:
      summary: Get organizations created by a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of organizations created by a user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
        '401':
          description: Unauthorized

  /organizations/{id}/jobs:
    get:
      summary: Get jobs for an organization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of jobs for the organization
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '404':
          description: Organization not found

  /organizations/{id}/collections:
    get:
      summary: Get collections for an organization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of collections for the organization
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
        '404':
          description: Organization not found
    
    post:
      summary: Add a collection to an organization
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - collectionId
                - group
              properties:
                collectionId:
                  type: string
                  format: uuid
                group:
                  type: string
      responses:
        '201':
          description: Collection added to organization
        '401':
          description: Unauthorized

  /organizations/{organizationId}/collections/{collectionId}:
    delete:
      summary: Remove a collection from an organization
      security:
        - bearerAuth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Collection removed from organization
        '401':
          description: Unauthorized

  /organizations/{id}/details:
    get:
      summary: Get organization with detailed information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Organization with jobs and collections
          content:
            application/json:
              schema:
                type: object
                properties:
                  organization:
                    $ref: '#/components/schemas/Organization'
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Collection'
        '404':
          description: Organization not found

  /jobs/search:
    get:
      summary: Search for jobs
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: categoryIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: skillIds
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: List of jobs matching the search criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'

  /jobs:
    post:
      summary: Create a new job
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '201':
          description: Created job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '401':
          description: Unauthorized

  /jobs/{id}:
    get:
      summary: Get job by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '404':
          description: Job not found

  /jobs/{id}/organization:
    get:
      summary: Get job with organization details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Job with organization details
          content:
            application/json:
              schema:
                type: object
                properties:
                  job:
                    $ref: '#/components/schemas/Job'
                  organization:
                    $ref: '#/components/schemas/Organization'
        '404':
          description: Job not found

  /collections:
    get:
      summary: Get collections for the current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of collections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
        '401':
          description: Unauthorized
    
    post:
      summary: Create a new collection
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        '201':
          description: Created collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '401':
          description: Unauthorized

  /collections/user/{userId}:
    get:
      summary: Get collections for a specific user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of collections with items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionWithItems'
        '401':
          description: Unauthorized

  /collections/{id}:
    get:
      summary: Get collection by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '404':
          description: Collection not found

  /collections/{id}/items:
    get:
      summary: Get collection with all its items
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Collection with all its items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionWithItems'
        '404':
          description: Collection not found

  /collections/{id}/items:
    post:
      summary: Add an item to a collection
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobId:
                  type: string
                  format: uuid
                organizationId:
                  type: string
                  format: uuid
                subCollectionId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Updated collection with items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionWithItems'
        '401':
          description: Unauthorized

  /search:
    get:
      summary: Search across jobs, organizations, and collections
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: searchType
          in: query
          schema:
            type: string
            enum: [all, jobs, organizations, collections]
            default: all
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Collection'

  /pages/{slug}:
    get:
      summary: Get page layout with content by slug
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Page layout with content
          content:
            application/json:
              schema:
                type: object
                properties:
                  layout:
                    $ref: '#/components/schemas/PageLayout'
                  content:
                    type: object
                    properties:
                      jobs:
                        type: array
                        items:
                          $ref: '#/components/schemas/Job'
                      organizations:
                        type: array
                        items:
                          $ref: '#/components/schemas/Organization'
        '404':
          description: Page not found